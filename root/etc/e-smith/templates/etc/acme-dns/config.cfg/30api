{

if (${'acme-dns-api'}{'UseTLS'} eq 'disabled') {
	my $tls = 'none'
} elsif (${'acme-dns-api'}{'TLSType'} eq 'staging') {
	my $tls = 'letsencryptstaging'
} elsif (${'acme-dns-api'}{'TLSType'} eq 'letsencrypt') {
	my $tls = 'letsencrypt'
} elsif (${'acme-dns-api'}{'TLSType'} eq 'cert') {
	my $tls = 'cert'
}

my $dr = ${'acme-dns-api'}{'DisableRegistration'} || "false";

 $OUT .= <<EOF

[api]
# listen ip eg. 127.0.0.1
ip = "0.0.0.0"
# disable registration endpoint
disable_registration = $dr
# listen port, eg. 443 for default HTTPS
port = "${'acme-dns-api'}{'TCPPort'}"
# possible values: "letsencrypt", "letsencryptstaging", "cert", "none"
tls = "$tls"
EOF

if ($tls eq 'cert') {
 $OUT .= <<EOF
# only used if tls = "cert"
tls_cert_privkey = "${'acme-dns-api'}{'KeyPath'}"
tls_cert_fullchain = "${'acme-dns-api'}{'FullchainPath'}"
EOF
} elsif ($tls eq 'letsencrypt') || ($tls eq 'letsencryptstaging') {
 $OUT .= <<EOF
# only used if tls = "letsencrypt"
acme_cache_dir = "api-certs"
EOF
}

 $OUT .= <<EOF
# CORS AllowOrigins, wildcards can be used
corsorigins = [
    "*"
]
# use HTTP header to get the client ip
use_header = false
# header name to pull the ip address / list of ip addresses from
header_name = "X-Forwarded-For"
EOF
}
